version: '3.6'
services:
    postgresql:
      image: docker.io/bitnami/postgresql:10
      volumes:
        - 'postgresql_data:/bitnami/postgresql'
      environment:
        - POSTGRESQL_DATABASE=bitnami_airflow
        - POSTGRESQL_USERNAME=bn_airflow
        - POSTGRESQL_PASSWORD=bitnami1
        - ALLOW_EMPTY_PASSWORD=yes
    redis:
      image: docker.io/bitnami/redis:6.0
      volumes:
        - 'redis_data:/bitnami'
      environment:
        - ALLOW_EMPTY_PASSWORD=yes
    airflow-scheduler:
      # TODO: to be reverted to use proper registry/distro on T39132
      # image: docker.io/bitnami/airflow-scheduler:2
      image: docker.io/bitnami/airflow-scheduler:2
      environment:
        - AIRFLOW_DATABASE_NAME=bitnami_airflow
        - AIRFLOW_DATABASE_USERNAME=bn_airflow
        - AIRFLOW_DATABASE_PASSWORD=bitnami1
        - AIRFLOW_EXECUTOR=CeleryExecutor
        - AIRFLOW_WEBSERVER_HOST=airflow
        - AIRFLOW_LOAD_EXAMPLES=no
      volumes:
        - airflow_scheduler_data:/bitnami
        - ./image_store/new_images:/bitnami/new_images
        - ./image_store/ml_image_processing:/bitnami/ml_image_processing
        - ./airflow/dags:/opt/bitnami/airflow/dags
        - ./image_store/labeled_data:/bitnami/labeled_data
        - ./data:/bitnami/data
        - ./airflow/requirements.txt:/bitnami/python/requirements.txt
    airflow-worker:
      # TODO: to be reverted to use proper registry/distro on T39132
      # image: docker.io/bitnami/airflow-worker:2
      image: docker.io/bitnami/airflow-worker:2
      environment:
        - AIRFLOW_DATABASE_NAME=bitnami_airflow
        - AIRFLOW_DATABASE_USERNAME=bn_airflow
        - AIRFLOW_DATABASE_PASSWORD=bitnami1
        - AIRFLOW_EXECUTOR=CeleryExecutor
        - AIRFLOW_WEBSERVER_HOST=airflow
      volumes:
        - airflow_worker_data:/bitnami
        - ./image_store/new_images:/bitnami/new_images
        - ./image_store/ml_image_processing:/bitnami/ml_image_processing
        - ./airflow/dags:/opt/bitnami/airflow/dags
        - ./image_store/labeled_data:/bitnami/labeled_data
        - ./data:/bitnami/data
        - ./airflow/requirements.txt:/bitnami/python/requirements.txt
    airflow:
      image: docker.io/bitnami/airflow:2
      environment:
        - AIRFLOW_DATABASE_NAME=bitnami_airflow
        - AIRFLOW_DATABASE_USERNAME=bn_airflow
        - AIRFLOW_DATABASE_PASSWORD=bitnami1
        - AIRFLOW_EXECUTOR=CeleryExecutor
        - AIRFLOW_LOAD_EXAMPLES=no
      ports:
        - '8080:8080'
      volumes:
        - airflow_data:/bitnami
        - ./airflow/dags:/opt/bitnami/airflow/dags
        - ./image_store/new_images:/bitnami/new_images
        - ./image_store/ml_image_processing:/bitnami/ml_image_processing
        - ./image_store/labeled_data:/bitnami/labeled_data
        - ./data:/bitnami/data
        - ./airflow/requirements.txt:/bitnami/python/requirements.txt
    ml-flask:
        container_name: ml-flask
        build:
          context: app/
        ports:
          - "5500:5500"
        volumes:
          - ./app:/app
          - ./image_store/ml_image_processing:/app/ml_image_processing
          - ./image_store/accurate_predictions:/app/accurate_predictions
          - ./image_store/inaccurate_predictions:/app/inaccurate_predictions
    mlflow-server:
      build: ./mlflow/
      working_dir: /usr/src/app
      ports:
        - "5000:5000"
      volumes:
        - .:/usr/src/app
      healthcheck:
        test: ["CMD", "curl", "-f", "http://0.0.0.0:5000"]
        interval: 10s
        timeout: 10s
        retries: 3
        start_period: 10s
      command: runServer.sh
    ml-model-training:
        container_name: ml-model-training
        build:
          context: training/
        ports:
          - "5550:5550"
        volumes:
          - ./app/models:/training/models
          - ./data:/training/data
          - ./image_store/labeled_data:/training/labeled_data
        ipc: "host"
        privileged: true

volumes:
  airflow_scheduler_data:
    driver: local
  airflow_worker_data:
    driver: local
  airflow_data:
    driver: local
  postgresql_data:
    driver: local
  redis_data:
    driver: local